1. #include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int findMedian(int arr[], int n) {
    
    qsort(arr, n, sizeof(int), compare);

        int mid_index = n / 2;
    return arr[mid_index];
}

int main() {
    int n;
    scanf("%d", &n);

    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("%d\n", findMedian(arr, n));
    return 0;
}

-----------------------------------------------------------------------------------------------------------------------------


2. #include <stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int flippingMatrix(int n, int matrix[2*n][2*n]) {
    int total = 0;
    int size = 2 * n;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int val1 = matrix[i][j];
            int val2 = matrix[i][size - j - 1];
            int val3 = matrix[size - i - 1][j];
            int val4 = matrix[size - i - 1][size - j - 1];

            int best = max(max(val1, val2), max(val3, val4));
            total += best;
        }
    }
    return total;
}

int main() {
    int q;
    scanf("%d", &q);

    while (q--) {
        int n;
        scanf("%d", &n);
        int matrix[2*n][2*n];

        for (int i = 0; i < 2*n; i++) {
            for (int j = 0; j < 2*n; j++) {
                scanf("%d", &matrix[i][j]);
            }
        }

        printf("%d\n", flippingMatrix(n, matrix));
    }

    return 0;
}